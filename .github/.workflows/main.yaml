name: CI/CD for Dockerized Flask App

# Trigger the workflow when code is pushed or pull request is created for the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # Job to build the Docker image
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the code from the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Python (optional - if you have tests or dependencies)
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # Step 3: Install dependencies (optional - for testing)
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Step 4: Run tests (if you have a test suite, optional)
    - name: Run Tests
      run: |
        pytest tests/

  # Job to build and publish Docker image to Docker Hub
  build_and_publish:
    # This job depends on the previous build-and-test job
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
    # Step 1: Check out the code again (each job runs independently)
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Docker Buildx (for multi-platform builds, optional)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Log in to Docker Hub using credentials stored in GitHub Secrets
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 4: Build and push the Docker image to Docker Hub
    - name: Build and push Docker Image
      id: docker_build
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile  # Make sure this is the correct path to your Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/flask-app:latest  # Docker Hub repo/tag

    # Step 5: Log the image digest (for reference)
    - name: Image Digest
      run: echo "Image Digest: ${{ steps.docker_build.outputs.digest }}"
